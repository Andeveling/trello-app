generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}
model User {
  id       Int           @id @default(autoincrement())
  email    String        @unique
  password String        @db.VarChar(255)
  name     String?
  profile  Profile?
  boards   BoardMember[] // Relación con los tableros donde es miembro
  ownedBoards Board[]    @relation("OwnedBoards") // Relación inversa con el campo `owner` en `Board`
  tasks    Task[]        @relation("AssignedTasks")
  comments Comment[]
}

model Board {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  owner       User          @relation("OwnedBoards", fields: [ownerId], references: [id])
  ownerId     Int
  columns     Column[]
  members     BoardMember[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model BoardMember {
  id       Int      @id @default(autoincrement())
  board    Board    @relation(fields: [boardId], references: [id])
  boardId  Int
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  role     BoardRole @default(MEMBER) // Rol del usuario en el tablero
}

model Column {
  id       Int         @id @default(autoincrement())
  name     String
  position Int // Orden de la columna en el tablero
  board    Board       @relation(fields: [boardId], references: [id])
  boardId  Int
  tasks    Task[]
  status   TaskStatus
}

model Task {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  position     Int        // Orden de la tarea en la columna
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  column       Column     @relation(fields: [columnId], references: [id])
  columnId     Int
  assignedTo   User?      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId Int?       // Usuario al que está asignada la tarea
  comments     Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum BoardRole {
  OWNER
  MEMBER
}